"use client"

import { useState, useEffect } from "react"
import { Terminal, Code, Wifi, Shield, Zap, Cpu, Coffee, Rocket, Bug } from "lucide-react"

interface LoadingScreenProps {
  onComplete: () => void
}

export function LoadingScreen({ onComplete }: LoadingScreenProps) {
  const [currentStep, setCurrentStep] = useState(0)
  const [displayText, setDisplayText] = useState("")
  const [showCursor, setShowCursor] = useState(true)
  const [isMobile, setIsMobile] = useState(false)
  const [coffeeLevel, setCoffeeLevel] = useState(0)

  // √âtapes avec plus d'humour et dur√©e r√©duite
  const mobileSteps = [
    { text: "R√©veil du d√©veloppeur... ‚òï", icon: Coffee, delay: 400 },
    { text: "Chargement des super-pouvoirs CCNA...", icon: Wifi, delay: 500 },
    { text: "Compilation du g√©nie React...", icon: Code, delay: 600 },
    { text: "√âlimination des bugs... üêõ", icon: Bug, delay: 400 },
    { text: "Ajout de la sauce secr√®te...", icon: Zap, delay: 500 },
    { text: "D√©collage imminent ! üöÄ", icon: Rocket, delay: 400 },
  ]

  const desktopSteps = [
    { text: "Initialisation du cerveau d√©veloppeur...", icon: Terminal, delay: 500 },
    { text: "T√©l√©chargement de 42 tasses de caf√©...", icon: Coffee, delay: 600 },
    { text: "Activation des super-pouvoirs CCNA...", icon: Wifi, delay: 700 },
    { text: "Configuration des VLANs magiques...", icon: Cpu, delay: 500 },
    { text: "Compilation du code de g√©nie React...", icon: Code, delay: 600 },
    { text: "Optimisation TypeScript niveau ninja...", icon: Code, delay: 500 },
    { text: "S√©curisation avec la force Jedi...", icon: Shield, delay: 600 },
    { text: "Chasse aux bugs en cours... üêõ", icon: Bug, delay: 500 },
    { text: "Pr√©paration du caf√© de la victoire... ‚òï", icon: Coffee, delay: 700 },
    { text: "Pr√™t √† conqu√©rir le monde ! üöÄ", icon: Rocket, delay: 600 },
  ]

  const funnyMessages = [
    "// TODO: Devenir millionnaire avec ce portfolio",
    "console.log('Bonjour le monde, je suis Seydina !');",
    "if (caf√© === null) { return 'Erreur critique'; }",
    "git commit -m 'Ajout de la magie ‚ú®'",
    "sudo make-me-awesome --force",
    "404: Bugs not found (ils ont tous fui !)",
    "while(vivant) { coder(); caf√©(); dormir(2h); }",
    "const succ√®s = travail + caf√© * passion;",
    "npm install bonheur --save-dev",
    "ping google.com // Internet fonctionne, on peut y aller !",
    "SELECT * FROM comp√©tences WHERE niveau = 'Expert';",
    "docker run --rm -it seydina/portfolio:latest",
    "chmod +x mon-avenir-brillant.sh",
    "// √áa compile ? C'est parti !",
    "import { G√©nie } from '@seydina/brain';",
    "const motivation = Math.max(...d√©fis);",
  ]

  const loadingQuotes = [
    "¬´ Le code, c'est de la po√©sie que les machines comprennent ¬ª",
    "¬´ Un r√©seau bien configur√©, c'est comme un caf√© bien pr√©par√© ¬ª",
    "¬´ Debug un jour, debug toujours... mais avec le sourire ! ¬ª",
    "¬´ CCNA : Cisco Certified Network Awesome ¬ª",
    "¬´ React + TypeScript = ‚ù§Ô∏è ¬ª",
    "¬´ En cas de doute, red√©marre le routeur ¬ª",
  ]

  // D√©tection mobile une seule fois
  useEffect(() => {
    setIsMobile(window.innerWidth < 768)
  }, [])

  // S√©lection des √©tapes
  const steps = isMobile ? mobileSteps : desktopSteps

  // Animation du curseur plus rapide
  useEffect(() => {
    const interval = setInterval(() => {
      setShowCursor((prev) => !prev)
    }, 400)
    return () => clearInterval(interval)
  }, [])

  // Animation du niveau de caf√©
  useEffect(() => {
    const coffeeTimer = setInterval(() => {
      setCoffeeLevel((prev) => (prev + 1) % 101)
    }, 100)
    return () => clearInterval(coffeeTimer)
  }, [])

  // Gestion des √©tapes - DUR√âE R√âDUITE
  useEffect(() => {
    if (currentStep >= steps.length) {
      // Animation termin√©e
      const timer = setTimeout(() => {
        onComplete()
      }, 300)
      return () => clearTimeout(timer)
    }

    // Timer pour passer √† l'√©tape suivante
    const stepTimer = setTimeout(() => {
      setCurrentStep((prev) => prev + 1)
    }, steps[currentStep].delay)

    return () => clearTimeout(stepTimer)
  }, [currentStep, steps, onComplete])

  // Animation de frappe plus rapide
  useEffect(() => {
    if (currentStep >= steps.length) return

    const targetText = steps[currentStep].text
    let charIndex = 0
    setDisplayText("")

    const typeInterval = setInterval(
      () => {
        if (charIndex < targetText.length) {
          setDisplayText(targetText.slice(0, charIndex + 1))
          charIndex++
        } else {
          clearInterval(typeInterval)
        }
      },
      isMobile ? 20 : 30, // Plus rapide
    )

    return () => clearInterval(typeInterval)
  }, [currentStep, steps, isMobile])

  const progress = Math.min(((currentStep + 1) / steps.length) * 100, 100)

  return (
    <div className="fixed inset-0 bg-gradient-to-br from-slate-950 via-black to-slate-900 flex items-center justify-center z-50 overflow-hidden">
      {/* Background Matrix Effect Am√©lior√© */}
      <div className="absolute inset-0 overflow-hidden opacity-10">
        {Array.from({ length: isMobile ? 20 : 60 }).map((_, i) => (
          <div
            key={i}
            className="absolute text-emerald-400 font-mono text-sm animate-pulse"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 2}s`,
              animationDuration: `${1 + Math.random() * 2}s`,
            }}
          >
            {["1", "0", "‚ô¶", "‚ô†", "‚ô£", "‚ô•", "‚òÖ", "‚óè"][Math.floor(Math.random() * 8)]}
          </div>
        ))}
      </div>

      {/* Floating Code Snippets */}
      <div className="absolute inset-0 overflow-hidden opacity-5">
        {["React", "CCNA", "TypeScript", "OSPF", "VLANs", "‚òï", "üöÄ", "üíª"].map((tech, i) => (
          <div
            key={tech}
            className="absolute text-emerald-300 font-mono text-xs animate-bounce"
            style={{
              left: `${Math.random() * 90}%`,
              top: `${Math.random() * 90}%`,
              animationDelay: `${i * 0.5}s`,
              animationDuration: `${3 + Math.random() * 2}s`,
            }}
          >
            {tech}
          </div>
        ))}
      </div>

      {/* Main Loading Container */}
      <div className="relative z-10 text-center max-w-3xl mx-auto px-4">
        {/* Terminal Window */}
        <div className="bg-black/90 backdrop-blur-sm border border-emerald-500/40 rounded-xl p-4 md:p-8 shadow-2xl shadow-emerald-500/20">
          {/* Terminal Header avec animation */}
          <div className="flex items-center justify-between mb-4 md:mb-6 pb-4 border-b border-emerald-500/20">
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
              <div className="w-3 h-3 bg-yellow-500 rounded-full animate-pulse delay-200"></div>
              <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse delay-400"></div>
            </div>
            <div className="text-emerald-400 font-mono text-xs md:text-sm animate-pulse">
              seydina@portfolio:~$ ./start-awesome-mode.sh
            </div>
          </div>

          {/* Loading Steps avec animations am√©lior√©es */}
          <div className="space-y-2 md:space-y-3 mb-6 md:mb-8" style={{ minHeight: "140px" }}>
            {steps.slice(0, Math.min(currentStep + 1, steps.length)).map((step, index) => {
              const StepIcon = step.icon
              return (
                <div
                  key={index}
                  className={`flex items-center space-x-2 md:space-x-3 font-mono text-xs md:text-sm transition-all duration-500 transform ${
                    index === currentStep
                      ? "text-emerald-400 scale-105 translate-x-2"
                      : index < currentStep
                        ? "text-green-300"
                        : "text-gray-500"
                  }`}
                >
                  <StepIcon
                    className={`w-4 h-4 flex-shrink-0 ${
                      index === currentStep
                        ? "animate-spin text-emerald-300"
                        : index < currentStep
                          ? "text-green-400 animate-bounce"
                          : ""
                    }`}
                  />
                  <span className="flex-1 text-left">
                    {index === currentStep ? (
                      <>
                        {displayText}
                        {showCursor && <span className="text-emerald-400 animate-pulse text-lg">|</span>}
                      </>
                    ) : (
                      step.text
                    )}
                  </span>
                  {index < currentStep && (
                    <span className="text-green-400 animate-bounce flex-shrink-0 text-lg">‚ú®</span>
                  )}
                </div>
              )
            })}
          </div>

          {/* Progress Bar Am√©lior√©e */}
          <div className="mb-6">
            <div className="flex justify-between text-xs text-gray-400 mb-2">
              <span>Progression du g√©nie</span>
              <span className="text-emerald-400 font-bold">{Math.round(progress)}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-3 overflow-hidden relative">
              <div
                className="h-full bg-gradient-to-r from-emerald-500 via-green-400 to-emerald-300 rounded-full transition-all duration-500 ease-out relative"
                style={{ width: `${progress}%` }}
              >
                <div className="absolute inset-0 bg-white/30 animate-pulse rounded-full"></div>
                <div className="absolute right-0 top-0 h-full w-4 bg-white/50 blur-sm animate-pulse"></div>
              </div>
            </div>
          </div>

          {/* Coffee Level Meter */}
          <div className="mb-4 bg-gray-900/50 rounded-lg p-3 border border-emerald-500/20">
            <div className="flex items-center justify-between mb-2">
              <span className="text-xs text-gray-400">‚òï Niveau de caf√©ine</span>
              <span className="text-emerald-400 text-xs font-mono">{coffeeLevel}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div
                className="h-full bg-gradient-to-r from-amber-600 to-amber-400 rounded-full transition-all duration-100"
                style={{ width: `${coffeeLevel}%` }}
              />
            </div>
          </div>

          {/* Funny Code Snippets avec rotation */}
          <div className="bg-gray-900/50 rounded-lg p-4 border border-emerald-500/20 mb-4">
            <div className="text-xs text-gray-400 mb-2">// En cours d'ex√©cution...</div>
            <div className="font-mono text-xs md:text-sm text-emerald-300 animate-pulse">
              {funnyMessages[currentStep % funnyMessages.length]}
            </div>
          </div>

          {/* Quote inspirante */}
          <div className="bg-emerald-500/10 rounded-lg p-3 border border-emerald-500/30">
            <div className="text-xs text-emerald-400 italic text-center">
              {loadingQuotes[Math.floor((currentStep / 2) % loadingQuotes.length)]}
            </div>
          </div>
        </div>

        {/* Loading Dots Am√©lior√©s */}
        <div className="flex justify-center space-x-2 mt-8">
          {[0, 1, 2, 3, 4].map((i) => (
            <div
              key={i}
              className="w-2 h-2 bg-emerald-400 rounded-full animate-bounce"
              style={{
                animationDelay: `${i * 0.1}s`,
                animationDuration: "0.8s",
              }}
            />
          ))}
        </div>

        {/* Status Text avec emoji */}
        <div className="mt-4 text-emerald-400/80 font-mono text-sm animate-pulse">
          {currentStep < steps.length ? <>üîÑ Chargement du g√©nie en cours...</> : <>üéâ Pr√™t √† impressionner !</>}
        </div>

        {/* Easter Egg - Konami Code hint */}
        {currentStep > steps.length / 2 && (
          <div className="mt-2 text-gray-500 text-xs animate-fade-in">
            üí° Astuce : Appuyez sur ‚Üë‚Üë‚Üì‚Üì‚Üê‚Üí‚Üê‚ÜíBA pour activer le mode ninja
          </div>
        )}
      </div>

      {/* Particules flottantes */}
      <div className="absolute inset-0 pointer-events-none">
        {Array.from({ length: 10 }).map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-emerald-400 rounded-full animate-ping opacity-60"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
              animationDuration: `${2 + Math.random() * 2}s`,
            }}
          />
        ))}
      </div>

      <style jsx>{`
        @keyframes fade-in {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        .animate-fade-in {
          animation: fade-in 1s ease-out;
        }
      `}</style>
    </div>
  )
}
